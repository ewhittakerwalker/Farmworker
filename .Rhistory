load(paste0(dir, "/data/merged_map.rda")
)
load(paste0(dir, "/data/merged_map.rda"))
dir <- getwd()
load(paste0(dir, "/data/merged_map.rda"))
load(paste0("Users/ewhittak/Desktop/Farmworker/data/merged_map.rda"))
load(paste0("/Users/ewhittak/Desktop/Farmworker/data/merged_map.rda"))
View(df_merge)
df_merge$geometry
geo <- df_merge$geometry
shiny::runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='farmworker',
token='B71242DE274771CF05D53F0A7E9A58F6',
secret='Lel6uDzvU91jNzsgSFC2zQ4Zo92Pgzy6/mt8dQpP')
deployApp()
pwd
get_csd()
get_cwd()
getwd()
shiny::runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
library(DESeq2)
library(DESeq2)
FPKM_file <- paste0("/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/GSE112832_Setd2_KO_RNA_FPKM.txt")
counts_df <- read.delim(FPKM_file)
rownames(counts_df) <- counts_df$Gene
drops <- c("Gene")
counts_df <- counts_df[ , !(names(counts_df) %in% drops)]
print(counts_df)
print(colnames(counts_df))
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D knockout vs control in P7 oocytes", length(rownames(res))),
location = rownames(res),
log_fold_change = res$log2FoldChange)
source("~/Desktop/Isomapper/GSE112832_FGO_1C_2C/De_Seq2.R")
source("~/Desktop/Isomapper/GSE112832_FGO_1C_2C/De_Seq2.R")
library(DESeq2)
FPKM_file <- paste0("/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/GSE112832_Setd2_KO_RNA_FPKM.txt")
counts_df <- read.delim(FPKM_file)
rownames(counts_df) <- counts_df$Gene
drops <- c("Gene")
counts_df <- counts_df[ , !(names(counts_df) %in% drops)]
counts_df <- counts_df %>%
rename(
X1C.48h._Setd2_KO_RNA_rep1.fpkm = X2C.48h._Setd2_KO_RNA_rep1.fpkm,
X1C.48h._Setd2_KO_RNA_rep2.fpkm = X2C.48h._Setd2_KO_RNA_rep2.fpkm
)
library(DESeq2)
FPKM_file <- paste0("/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/GSE112832_Setd2_KO_RNA_FPKM.txt")
counts_df <- read.delim(FPKM_file)
rownames(counts_df) <- counts_df$Gene
drops <- c("Gene")
counts_df <- counts_df[ , !(names(counts_df) %in% drops)]
counts_df <- counts_df %>%
rename(
"X1C.48h._Setd2_KO_RNA_rep1.fpkm" = "X2C.48h._Setd2_KO_RNA_rep1.fpkm",
"X1C.48h._Setd2_KO_RNA_rep2.fpkm" = "X2C.48h._Setd2_KO_RNA_rep2.fpkm"
)
print(counts_df)
print(colnames(counts_df))
## make metadata
metadata_df <- data.frame(sample = c("FGO_Setd2_Con_RNA_rep1.fpkm",
"FGO_Setd2_Con_RNA_rep2.fpkm",
"FGO_Setd2_KO_RNA_rep1.fpkm",
"FGO_Setd2_KO_RNA_rep2.fpkm",
"X1C_Setd2_Con_RNA_rep1.fpkm",
"X1C_Setd2_Con_RNA_rep2.fpkm",
"X1C_Setd2_KO_RNA_rep1.fpkm" ,
"X1C_Setd2_KO_RNA_rep2.fpkm" ,
"X2C.48h._Setd2_Con_RNA_rep1.fpkm",
"X2C.48h._Setd2_Con_RNA_rep2.fpkm" ,
"X2C.48h._Setd2_KO_RNA_rep1.fpkm"  ,
"X2C.48h._Setd2_KO_RNA_rep2.fpkm" ),
condition = c("FGO_Setd2_Con",
"FGO_Setd2_Con",
"FGO_Setd2_KO",
"FGO_Setd2_KO",
"1C_Setd2_Con",
"1C_Setd2_Con",
"1C_Setd2_KO",
"1C_Setd2_KO",
"2C_Setd2_Con",
"2C_Setd2_Con",
"2C_Setd2_KO",
"2C_Setd2_KO"))
rownames(metadata_df) <- metadata_df$sample
print(metadata_df)
print(ncol(counts_df))
print(nrow(metadata_df))
dds <- DESeqDataSetFromMatrix(countData = round(counts_df),
colData = metadata_df,
design = ~ condition)
dds$condition <- factor(dds$condition)
dds <- DESeq(dds)
## 7.675859e-02
res <- results(dds)
res_FGOs <- results(dds, contrast=c("condition","FGO_Setd2_Con","FGO_Setd2_KO"))
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D knockout vs control in FGOs", length(rownames(res_FGOs))),
location = rownames(res_FGOs),
log_fold_change = res_FGOs$log2FoldChange)
print(head(res_FGOs))
res_FGOs <- results(dds, contrast=c("condition","FGO_Setd2_KO","FGO_Setd2_Con"))
print(head(res_FGOs))
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D knockout vs control in FGOs", length(rownames(res_FGOs))),
location = rownames(res_FGOs),
log_fold_change = res_FGOs$log2FoldChange)
write.csv(iso_df, file="/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/SET2D_KO_vs_Control_FGOs.csv")
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D_knockout_vs_control_in_2C", length(rownames(res_2C))),
location = rownames(res_2C),
log_fold_change = res_2Cs$log2FoldChange)
source("~/Desktop/Isomapper/GSE112832_FGO_1C_2C/De_Seq2.R")
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D_knockout_vs_control_in_1C", length(rownames(res_1C))),
location = rownames(res_1C),
log_fold_change = res_1C$log2FoldChange)
write.csv(iso_df, file="/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/SET2D_KO_vs_Control_1C.csv")
## 2Cell stage
res_2C <- results(dds, contrast=c("condition","2C_Setd2_KO","2C_Setd2_Con"))
print(head(res_2C))
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D_knockout_vs_control_in_2C", length(rownames(res_2C))),
location = rownames(res_2C),
log_fold_change = res_2Cs$log2FoldChange)
## make dataframe for isomapper
iso_df <- data.frame(metadata = rep("SET2D_knockout_vs_control_in_2C", length(rownames(res_2C))),
location = rownames(res_2C),
log_fold_change = res_2C$log2FoldChange)
write.csv(iso_df, file="/Users/ewhittak/Desktop/Isomapper/GSE112832_FGO_1C_2C/SET2D_KO_vs_Control_2C.csv")
source("~/Desktop/Isomapper/GSE112832_8C/De_Seq2.R")
source("~/Desktop/Isomapper/GSE112832_8C/De_Seq2.R")
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
shinyUI(navbarPage(
theme = shinythemes::shinytheme("flatly"),  # <--- To use a theme, uncomment this
"Farmworkers Health App",
tabPanel("Public Data",
# sidebarPanel(
#   # Input: Select a dataset ----
#   # tags$style(type='text/css', ".selectize-input { font-size: 13px;} .selectize-dropdown { font-size: 13px; line-height: 14px; }"),
#   # selectInput("cohort", "Select a cohort:",
#   #             choices = c(4, 3, 2, 1, 0)),
#   selectInput("county", "select a county:",
#               choices = counties),
#   width = 2 ### EDIT HERE
# ),
# conditionalPanel("input.tabselect==2",
#                  sidebarPanel(selectInput("county",
#                                           "select a county:",
#                                           choices = counties))
# ),
sidebarPanel(selectInput("category", "select a category:",
choices = category_choices,
selected = "Air")
),
sidebarPanel(selectInput("indicator", "select a indicator:",
choices = indicator_choices,
selected = "Air_Quality")
),
sidebarPanel(selectInput("language", "select language/lengua:",
choices = c("English", "Spanish"),
selected = "English")
),
mainPanel(
tabsetPanel(
tabPanel("Map", value = 1,
tags$style(type = "text/css", "#map {height: calc(80vh - 80px) !important;}"),
leafletjs,
leafletOutput("map")
#mapview:::plainViewOutput("test"),
),
tabPanel("Data", value = 2,
# tags$head(tags$style("#tbl1 {white-space: nowrap;}")),
# tags$head(tags$style(".modal-dialog{ width:1000px}")),
tags$head(tags$style("table.dataTable thead th {
padding: 8px 10px !important;}")),
DT::dataTableOutput('tbl1')
# bsModal("geneModal", "Beeswarm", "",plotOutput('gPlot'), size = "large")
),
id = "tabselect")
# tabPanel("Completetion Bar Chart",
#  plotOutput("Hist"))
)
)
))
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
runApp('Desktop/Farmworker')
shiny::runApp('Desktop/Farmworker')
